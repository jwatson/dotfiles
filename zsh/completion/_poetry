#compdef poetry

_poetry_fa45def9acb369a9_complete()
{
    local state com cur

    cur=${words[${#words[@]}]}

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    if [[ ${cur} == --* ]]; then
        state="option"
        opts=("--ansi:Force ANSI output" "--help:Display this help message" "--no-ansi:Disable ANSI output" "--no-interaction:Do not ask any interactive question" "--quiet:Do not output any message" "--verbose:Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug" "--version:Display this application version")
    elif [[ $cur == $com ]]; then
        state="command"
        coms=("about:Short information about Poetry." "add:Add a new dependency to pyproject.toml." "build:Builds a package, as a tarball and a wheel by default." "check:Checks the validity of the pyproject.toml file." "config:Sets/Gets config options." "debug\:info:Shows debug information." "debug\:resolve:Debugs dependency resolution." "help:Displays help for a command" "install:Installs the project dependencies." "list:Lists commands" "lock:Locks the project dependencies." "new:Creates a new Python project at <path\>" "publish:Publishes a package to a remote repository." "remove:Removes a package from the project dependencies." "run:Runs a command in the appropriate environment." "script:Executes a script defined in pyproject.toml" "search:Searches for packages on remote repositories." "self\:update:Updates poetry to the latest version." "show:Shows information about packages." "update:Update dependencies as according to the pyproject.toml file." "version:Bumps the version of the project.")
    fi

    case $state in
        (command)
            _describe 'command' coms
        ;;
        (option)
            case "$com" in

            (about)
            opts+=()
            ;;

            (add)
            opts+=("--allow-prereleases:Accept prereleases." "--dev:Add package as development dependency." "--dry-run:Outputs the operations but will not execute anything \(implicitly enables --verbose\)." "--optional:Add as an optional dependency.")
            ;;

            (build)
            opts+=("--format:Limit the format to either wheel or sdist.")
            ;;

            (check)
            opts+=()
            ;;

            (config)
            opts+=("--list:List configuration settings" "--unset:Unset configuration setting")
            ;;

            (debug:info)
            opts+=()
            ;;

            (debug:resolve)
            opts+=()
            ;;

            (help)
            opts+=("--format:The output format \(txt, json, or md\)" "--raw:To output raw command help")
            ;;

            (install)
            opts+=("--dry-run:Outputs the operations but will not execute anything \(implicitly enables --verbose\)." "--extras:Extra sets of dependencies to install \(multiple values allowed\)." "--no-dev:Do not install dev dependencies.")
            ;;

            (list)
            opts+=("--format:The output format \(txt, json, or md\)" "--raw:To output raw command list")
            ;;

            (lock)
            opts+=()
            ;;

            (new)
            opts+=("--name:Set the resulting package name.")
            ;;

            (publish)
            opts+=("--no-build:Do not build the package before publishing." "--repository:The repository to publish the package to.")
            ;;

            (remove)
            opts+=("--dev:Removes a package from the development dependencies." "--dry-run:Outputs the operations but will not execute anything \(implicitly enables --verbose\).")
            ;;

            (run)
            opts+=()
            ;;

            (script)
            opts+=()
            ;;

            (search)
            opts+=("--only-name:Search only in name.")
            ;;

            (self:update)
            opts+=("--preview:Install prereleases.")
            ;;

            (show)
            opts+=("--latest:Show the latest version." "--outdated:Show the latest version but only for packages that are outdated." "--tree:List the dependencies as a tree.")
            ;;

            (update)
            opts+=("--dry-run:Outputs the operations but will not execute anything \(implicitly enables --verbose\)." "--no-dev:Do not install dev dependencies.")
            ;;

            (version)
            opts+=()
            ;;

            esac

            _describe 'option' opts
        ;;
        *)
            # fallback to file completion
            _arguments '*:file:_files'
    esac
}

_poetry_fa45def9acb369a9_complete "$@"
compdef _poetry_fa45def9acb369a9_complete /Users/jwatson/.local/venvs/poetry/bin/poetry
